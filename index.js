/* Icon.html generated by Svelte v2.13.2 */

function viewBox({icon}) {
  return `0 0 ${icon.icon[0]} ${icon.icon[1]}`
};

function classes(props) {
  let classes = "fa-svelte "
  if(props.class) {
    return classes + props.class;
  }
  return classes
};

function path({icon}) {
  return icon.icon[4]
};

function title(props) {
  return props.title ? props.title : ''
};

function add_css() {
	var style = createElement("style");
	style.id = 'svelte-p8vizn-style';
	style.textContent = ".fa-svelte.svelte-p8vizn{width:1em;height:1em;overflow:visible;display:inline-block}";
	append(document.head, style);
}

function create_main_fragment(component, ctx) {
	var svg, path_1;

	return {
		c() {
			svg = createSvgElement("svg");
			path_1 = createSvgElement("path");
			setAttribute(path_1, "fill", "currentColor");
			setAttribute(path_1, "d", ctx.path);
			setAttribute(svg, "aria-hidden", "true");
			setAttribute(svg, "class", "" + ctx.classes + " svelte-p8vizn");
			setAttribute(svg, "role", "img");
			setAttribute(svg, "xmlns", "http://www.w3.org/2000/svg");
			setAttribute(svg, "viewBox", ctx.viewBox);
			setAttribute(svg, "title", ctx.title);
		},

		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path_1);
		},

		p(changed, ctx) {
			if (changed.path) {
				setAttribute(path_1, "d", ctx.path);
			}

			if (changed.classes) {
				setAttribute(svg, "class", "" + ctx.classes + " svelte-p8vizn");
			}

			if (changed.viewBox) {
				setAttribute(svg, "viewBox", ctx.viewBox);
			}

			if (changed.title) {
				setAttribute(svg, "title", ctx.title);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(svg);
			}
		}
	};
}

function Icon(options) {
	init(this, options);
	this._state = assign({}, options.data);
	this._recompute({ icon: 1 }, this._state);
	this._intro = true;

	if (!document.getElementById("svelte-p8vizn-style")) add_css();

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._mount(options.target, options.anchor);
	}
}

assign(Icon.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_stage: _stage,
 	_mount: _mount,
 	_differs: _differs
 });

Icon.prototype._recompute = function _recompute(changed, state) {
	if (changed.icon) {
		if (this._differs(state.viewBox, (state.viewBox = viewBox(state)))) changed.viewBox = true;
		if (this._differs(state.path, (state.path = path(state)))) changed.path = true;
	}

	if (this._differs(state.classes, (state.classes = classes(exclude(state, "classes"))))) changed.classes = true;
	if (this._differs(state.title, (state.title = title(exclude(state, "title"))))) changed.title = true;
}

function createElement(name) {
	return document.createElement(name);
}

function append(target, node) {
	target.appendChild(node);
}

function createSvgElement(name) {
	return document.createElementNS('http://www.w3.org/2000/svg', name);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function exclude(src, prop) {
	const tar = {};
	for (const k in src) k === prop || (tar[k] = src[k]);
	return tar;
}

function blankObject() {
	return Object.create(null);
}

function noop() {}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}
export default Icon;